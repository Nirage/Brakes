const customerTools = {
  _autoload: [
    ['grossProfitCalculator', $('.js-toolsGPC').length],
    ['initPartCalculator', $('.js-partCalculator').length]
  ],
  grossProfitCalculator: function () {
    this.currencySymbol = '£'; // Default value
    this.vatRate = $('.js-btnVatRateDefault').data('value'); // default value
    this.bindOnFormActions();
  },
  bindOnFormActions: function () {
    $(document).on('submit', '.js-toolsForm', ACC.customerTools.handleToolsFormSubmit);
    $(document).on('click', '.js-formAction', ACC.customerTools.handleToolsFormAction);
  },
  handleToolsFormSubmit: function (e) {
    e.preventDefault();
    var $form = $(this);
    var formId = $form.attr('id');
    var hasErrors = $form.find('.has-error').length;
    if (hasErrors == 0) {
      // calculate only if form has no errors
      ACC.customerTools.calculateForm(formId);
    } else {
      // focus on the first field
      ACC.customerTools.scrollToFirstError($form);
    }
  },
  scrollToFirstError: function ($form) {
    $('body,html').animate(
      {
        scrollTop: $form.find('.has-error').first().offset().top / 2
      },
      250, //speed
      function () {
        $form.find('.has-error').first().find('.js-formInput').focus();
      }
    );
  },
  handleToolsFormAction: function (e) {
    var _this = ACC.customerTools;
    var $this = $(e.target);
    var actionName = $this.data('action');
    var parentFormId = $this.data('parent');
    switch (actionName) {
      case 'reset':
        _this.resetForm(parentFormId);
        break;
      case 'vat-rate':
        var value = $this.data('value');
        var TOGGLE_CLASSES = 'btn-secondary btn-primary';
        $this.toggleClass(TOGGLE_CLASSES);
        $this.siblings().toggleClass(TOGGLE_CLASSES);
        _this.updateConfigObj('vatRate', value);
        _this.resetAllForms();
        break;
      case 'switch-calculator':
        var calcId = $this.data('calculator-id');
        _this.switchCalculators($this, calcId);
        break;
      case 'add-cost':
        _this.appendAccompanimentCost(parentFormId);
        break;
      case 'remove-cost':
        _this.removeAccompanimentCost(parentFormId);
        break;
    }
  },
  resetForm: function (formId) {
    var $form = $('#' + formId);
    var $allInputs = $form.find('input');
    var $formGroup = $form.find('.js-formGroup');
    var $submitBtn = $form.find('.js-submitBtn');
    var $errorMsg = $form.find('.js-errorMsg');
    var $calcPrice = $form.find('.js-calcPrice');
    var $select = $form.find('.js-formSelect');

    // Reset all values
    $allInputs.val('');
    $select.val('');
    // Reset HTML generated by Handlebars
    $('.js-formRenderedHtml').html('');
    // Reset all calculation
    $calcPrice.html(ACC.customerTools.currencySymbol + '00.00');
    $('.js-calcPercentage').html('00%');

    // Hide all error messages
    $errorMsg.addClass('hide');

    // Remove all errors/valid classes
    $formGroup.removeClass('has-error is-valid');

    // Enable submit Button
    $submitBtn.removeClass('disabled');
  },
  resetAllForms: function () {
    var _this = this;
    var $allForms = $('.js-toolsForm');
    $allForms.each(function () {
      var formId = $(this).attr('id');
      _this.resetForm(formId);
    });
  },
  updateConfigObj: function (keyName, newValue) {
    if (keyName && typeof newValue != 'undefined') {
      ACC.customerTools[keyName] = newValue;
    }
  },
  calculateForm: function (formId) {
    var _this = this;
    switch (formId) {
      case 'fromCostToRRP':
        _this.calculateFromCostPrice(formId);
        break;
      case 'grossProfit':
        _this.calculateGrossProfit(formId);
        break;
      case 'menuPriceToCostPrice':
        _this.calculateMenuPriceToCostPrice(formId);
        break;
      case 'menuPriceAndCostPrice':
        _this.calculateMenuPriceAndCostPrice(formId);
        break;
      case 'costPriceToMenuPrice':
        _this.calculateCostPriceToMenuPrice(formId);
        break;
    }
  },
  switchCalculators: function ($this, calcId) {
    $('.js-calculator').removeClass('is-active');
    $(".js-calculator[data-id='" + calcId + "']").addClass('is-active');

    $('.js-formAction[data-action="switch-calculator"]').removeClass('btn-primary').addClass('btn-default custom-button--default');

    $this.removeClass('btn-default custom-button--default').addClass('btn-primary');
  },
  calculateFromCostPrice: function (formId) {
    var $form = $('#' + formId);
    var vatRate = ACC.customerTools.vatRate / 100;
    var currencySymbol = ACC.customerTools.currencySymbol;
    var $unitPrice = $form.find(".js-formInput[data-input-type='unit-price']"); // eg: £10.00
    var $marginRequired = $form.find(".js-formInput[data-input-type='margin']"); //eg: 2%

    var cleanPrice = $unitPrice.val().replace(/£/g, '');
    var cleanMargin = $marginRequired.val().replace(/\%/g, '');

    var unitPriceValue = parseFloat(cleanPrice, 10);
    var marginValue = parseFloat(cleanMargin, 10) / 100;

    // Calculations
    var unitPriceWithMargin = unitPriceValue / (1 - marginValue);
    var vatValue = unitPriceWithMargin * vatRate;
    var result = unitPriceWithMargin + unitPriceWithMargin * vatRate;

    // Update DOM
    $('.js-unitPriceCalc').html(currencySymbol + unitPriceWithMargin.toFixed(2));
    $('.js-vatTotalCalc').html(currencySymbol + vatValue.toFixed(2));
    $('.js-finalCalc').html(currencySymbol + result.toFixed(2));
  },
  calculateGrossProfit: function (formId) {
    var $form = $('#' + formId);
    var vatRate = ACC.customerTools.vatRate / 100;
    var currencySymbol = ACC.customerTools.currencySymbol;
    var $rrp = $form.find(".js-formInput[data-input-type='rrp']"); // eg: £10.00
    var $costPrice = $form.find(".js-formInput[data-input-type='cost-price']"); // eg: £10.00

    var cleanRrp = $rrp.val().replace(/£/g, '');
    var cleanCostPrice = $costPrice.val().replace(/£/g, '');

    var rrpValue = parseFloat(cleanRrp, 10);
    var costPriceValue = parseFloat(cleanCostPrice, 10);

    // Calculations

    var rrpNoVat = rrpValue / (1 + vatRate);
    var grossProfitNoVat = rrpNoVat - costPriceValue;

    var resultPercentage = ((rrpNoVat - costPriceValue) / rrpNoVat) * 100;
    // // Update DOM
    $('.js-rrpExVat').html(currencySymbol + rrpNoVat.toFixed(2));
    $('.js-grossProfitExVat').html(currencySymbol + grossProfitNoVat.toFixed(2));
    $('.js-finalRrpCalc').html(parseInt(resultPercentage) + '%');
  },
  calculateMenuPriceToCostPrice: function (formId) {
    var $form = $('#' + formId);
    var vatRate = ACC.customerTools.vatRate / 100;
    var currencySymbol = ACC.customerTools.currencySymbol;
    var $finalCalc = $form.find('.js-finalCalc');

    var $menuPrice = $form.find(".js-formInput[data-input-type='menu-price']"); // eg: £10.00
    var $marginRequired = $form.find(".js-formInput[data-input-type='margin']"); //eg: 2%

    var $menuPriceExVat = $form.find(".js-formInput[data-input-type='menu-price-ex-vat']"); // eg: £10.00
    var $grossProfitExVat = $form.find(".js-formInput[data-input-type='gross-profit-ex-vat']"); // eg: £10.00

    var cleanMenuPrice = $menuPrice.val().replace(/£/g, '');
    var cleanMargin = $marginRequired.val().replace(/\%/g, '');

    // Menu price (ex VAT) - should display the result of the following calculation:
    // Menu Price (inc VAT) / (1 + VAT RATE) – Note: VAT rate can be 20% or 0%, based on the users selection
    var menuPriceExVat = cleanMenuPrice / (1 + vatRate);

    // Gross profit (ex VAT) - should display the result of the following calculation:
    // Menu price (ex VAT) x margin required
    var grossProfitExVat = menuPriceExVat * (cleanMargin / 100);

    // Menu price (ex VAT) - Gross profit (ex VAT)
    var result = menuPriceExVat - grossProfitExVat;

    // Update DOM
    $menuPriceExVat.val(currencySymbol + menuPriceExVat.toFixed(2));
    $grossProfitExVat.val(currencySymbol + grossProfitExVat.toFixed(2));
    $finalCalc.html(currencySymbol + result.toFixed(2));
  },
  calculateMenuPriceAndCostPrice: function (formId) {
    var $form = $('#' + formId);
    var vatRate = ACC.customerTools.vatRate / 100;
    var currencySymbol = ACC.customerTools.currencySymbol;
    var $finalCalc = $form.find('.js-finalCalc');

    var $menuPrice = $form.find(".js-formInput[data-input-type='menu-price']");
    var cleanMenuPrice = $menuPrice.val().replace(/£/g, '');

    var $costPriceExVat = $form.find(".js-formInput[data-input-type='cost-price-ex-vat']");
    var cleanCostPriceExVat = $costPriceExVat.val().replace(/£/g, '');

    var $menuPriceExVat = $form.find(".js-formInput[data-input-type='menu-price-ex-vat']"); // eg: £10.00
    var $grossProfitExVat = $form.find(".js-formInput[data-input-type='gross-profit-ex-vat']"); // eg: £10.00

    // Calculations
    //Menu price (ex VAT) = Menu Price (inc VAT) / (1 + VAT RATE) – Note: VAT rate can be 20% or 0%, based on the users selection
    var menuPriceExVat = cleanMenuPrice / (1 + vatRate);

    // Gross profit (ex VAT) = Cost price (ex VAT) - Menu price (ex VAT)
    var grossProfitExVat = menuPriceExVat - cleanCostPriceExVat;

    // Gross profit = Gross profit (ex VAT) / Menu price (ex VAT) x 100
    var result = (grossProfitExVat / menuPriceExVat) * 100;

    // Update DOM
    $menuPriceExVat.val(currencySymbol + menuPriceExVat.toFixed(2));
    $grossProfitExVat.val(currencySymbol + grossProfitExVat.toFixed(2));
    $finalCalc.html(result.toFixed(2) + '%');
  },
  calculateCostPriceToMenuPrice: function (formId) {
    var $form = $('#' + formId);
    var vatRate = ACC.customerTools.vatRate / 100;
    var currencySymbol = ACC.customerTools.currencySymbol;

    // Selectors
    var $finalCalc = $form.find('.js-finalCalc');
    var $totalFoodPrice = $form.find(".js-formInput[data-input-type='total-price-food']");
    var $menuPriceExVat = $form.find(".js-formInput[data-input-type='menu-price-ex-vat']");
    var $grossProfit = $form.find(".js-formInput[data-input-type='gross-profit-ex-vat']");
    var $vatOnly = $form.find(".js-formInput[data-input-type='vat-only']");

    // Values
    var $plateCost = $form.find(".js-formInput[data-input-type='plate-cost']");
    var $marginRequired = $form.find(".js-formInput[data-input-type='margin']"); //eg: 2%
    var $allAccompanimentsCost = $form.find(".js-formInput[data-input-type='accompaniment-cost']");

    // Clean values
    var cleanPlateCost = $plateCost.val().replace(/£/g, '');
    var cleanMargin = $marginRequired.val().replace(/\%/g, '');
    var sumOfAllAccompaniments = this.addAllCosts($allAccompanimentsCost);

    // Calculations
    var priceFoodTotal = parseFloat(cleanPlateCost) + sumOfAllAccompaniments;
    var menuPriceExVat = priceFoodTotal / (1 - cleanMargin / 100);
    var grossProfit = menuPriceExVat - priceFoodTotal;
    var vatOnly = menuPriceExVat * vatRate;
    var result = menuPriceExVat + vatOnly;

    // Update DOM
    $totalFoodPrice.val(currencySymbol + priceFoodTotal.toFixed(2));
    $menuPriceExVat.val(currencySymbol + menuPriceExVat.toFixed(2));
    $grossProfit.val(currencySymbol + grossProfit.toFixed(2));
    $vatOnly.val(currencySymbol + vatOnly.toFixed(2));

    $finalCalc.html(currencySymbol + result.toFixed(2));
  },
  addAllCosts: function ($listOfInputs) {
    var sum = 0;
    $listOfInputs.each(function () {
      var inputValue = $(this).val().replace(/\£/g, '');

      if (inputValue) {
        sum += parseFloat(inputValue);
      }
    });
    return sum;
  },
  appendAccompanimentCost: function (formId) {
    var $form = $('#' + formId);
    var counter = this.getInputLength($form, 'accompaniment-cost');
    var accompanimentTemplate = ACC.global.compileHandlebarTemplate('#accompaniment-cost-template');
    var accompanimentObj = accompanimentTemplate({ counter: counter + 1 });
    $('.js-accompanimentsList').append(accompanimentObj);
  },
  removeAccompanimentCost: function (formId) {
    var $form = $('#' + formId);
    var counter = this.getInputLength($form, 'accompaniment-cost');
    // Don't delete first cost
    if (counter > 1) {
      $('.js-accompanimentsList').find('.js-formGroup').last().remove();
    }
  },
  getInputLength: function ($form, inputName) {
    var $inputs = $form.find(".js-formInput[data-input-type='" + inputName + "']");
    return $inputs.length;
  },
  initPartCalculator: function () {
    this.bindOnPartyCalculatorSubmit();
  },
  bindOnPartyCalculatorSubmit: function () {
    this.bindOnFormActions();
    $('.js-partCalculatorForm').on('submit', function (e) {
      e.preventDefault();
      var $form = $(this);
      var partyType = $form.find('.js-typeOfEvent').val();
      var noOfGuests = $form.find('.js-noOfGuests').val();
      var errors = $form.find('.has-error');
      if (partyType != '' && noOfGuests != '' && !errors.length) {
        var endpoint = '/view/PartyCalculatorPageComponentController/eventTypePerPerson';

        $.ajax({
          type: 'GET',
          url: endpoint,
          data: {
            eventType: partyType,
            noOfGuests: noOfGuests
          },
          success: function (response) {
            var data = {
              bites: [
                {
                  id: 'meatandPoultry',
                  name: window.partyCalculator.meatandPoultry.name,
                  perPerson: response.perPerson.meatandPoultry,
                  perBites: response.perBites.meatandPoultry
                },
                {
                  id: 'fishandSeafood',
                  name: window.partyCalculator.fishandSeafood.name,
                  perPerson: response.perPerson.fishandSeafood,
                  perBites: response.perBites.fishandSeafood
                },
                {
                  id: 'vegetarian',
                  name: window.partyCalculator.vegetarian.name,
                  perPerson: response.perPerson.vegetarian,
                  perBites: response.perBites.vegetarian
                },
                {
                  id: 'desserts',
                  name: window.partyCalculator.desserts.name,
                  perPerson: response.perPerson.desserts,
                  perBites: response.perBites.desserts
                },
                {
                  id: 'extras',
                  name: window.partyCalculator.extras.name,
                  perPerson: response.perPerson.extras,
                  perBites: response.perBites.extras
                }
              ],
              totals: {
                perPerson: response.perPerson.total,
                perBites: response.perBites.total
              }
            };
            ACC.global.renderHandlebarsTemplate(data, 'jsPartyCalculatorTable', 'party-calculator-template');
          },
          error: function () {
            console.warn('Error retrieving data for party calculator');
          }
        });
      }
    });
  }
};

export default customerTools;
